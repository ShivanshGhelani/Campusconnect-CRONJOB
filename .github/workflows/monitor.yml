name: Campus Connect Monitoring Cron Jobs

on:
  schedule:
    # Monitor every 5 minutes (GitHub Actions free limit)
    - cron: '*/5 * * * *'
    # Daily report at midnight UTC
    - cron: '0 0 * * *'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  monitor-service:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests python-dotenv loguru
        
    - name: Check service status and send alerts
      env:
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        BASE_URL: ${{ secrets.BASE_URL }}
      run: |
        python -c "
        import os
        import requests
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime
        import json
        
        def check_service():
            base_url = os.getenv('BASE_URL', 'https://campusconnect-v2.onrender.com')
            endpoints = ['/ping', '/api/health']
            results = []
            
            for endpoint in endpoints:
                for method in ['GET', 'HEAD']:
                    try:
                        url = base_url + endpoint
                        response = requests.request(method, url, timeout=10)
                        success = response.status_code == 200
                        results.append({
                            'endpoint': endpoint,
                            'method': method,
                            'success': success,
                            'status_code': response.status_code,
                            'response_time': response.elapsed.total_seconds() * 1000
                        })
                        print(f'âœ“ {method} {endpoint}: {response.status_code} ({response.elapsed.total_seconds() * 1000:.0f}ms)')
                    except Exception as e:
                        results.append({
                            'endpoint': endpoint,
                            'method': method,
                            'success': False,
                            'error': str(e)
                        })
                        print(f'âœ— {method} {endpoint}: {str(e)}')
            
            # Check if any endpoint is healthy
            healthy = any(r.get('success', False) for r in results)
            
            # Send alert if service is down (only on scheduled runs, not manual)
            if not healthy and os.getenv('GITHUB_EVENT_NAME') == 'schedule':
                send_alert('DOWNTIME', results)
            
            return healthy, results
        
        def send_alert(alert_type, results):
            try:
                smtp_server = os.getenv('SMTP_SERVER')
                smtp_port = int(os.getenv('SMTP_PORT', 587))
                email_user = os.getenv('EMAIL_USER')
                email_password = os.getenv('EMAIL_PASSWORD')
                from_email = os.getenv('FROM_EMAIL')
                recipient_email = os.getenv('RECIPIENT_EMAIL')
                
                if not all([smtp_server, email_user, email_password, from_email, recipient_email]):
                    print('Email configuration incomplete, skipping alert')
                    return
                
                msg = MIMEMultipart()
                msg['From'] = from_email
                msg['To'] = recipient_email
                msg['Subject'] = f'ðŸš¨ Campus Connect {alert_type} Alert'
                
                # Create alert body
                body = f'''
                <h2 style=\"color: #ef4444;\">ðŸš¨ Campus Connect Service Alert</h2>
                <p><strong>Alert Type:</strong> {alert_type}</p>
                <p><strong>Timestamp:</strong> {datetime.now().isoformat()}</p>
                <p><strong>Status:</strong> Service appears to be DOWN</p>
                
                <h3>Endpoint Results:</h3>
                <ul>
                '''
                
                for result in results:
                    status = 'âœ“' if result.get('success') else 'âœ—'
                    body += f'<li>{status} {result[\"method\"]} {result[\"endpoint\"]}: {result.get(\"status_code\", \"Error\")}</li>'
                
                body += '''
                </ul>
                <p>This alert was sent automatically by GitHub Actions monitoring.</p>
                '''
                
                msg.attach(MIMEText(body, 'html'))
                
                # Send email
                server = smtplib.SMTP(smtp_server, smtp_port)
                server.starttls()
                server.login(email_user, email_password)
                server.send_message(msg)
                server.quit()
                
                print(f'Alert email sent successfully to {recipient_email}')
                
            except Exception as e:
                print(f'Failed to send alert email: {str(e)}')
        
        # Run the check
        healthy, results = check_service()
        
        # Send daily report if it's midnight UTC
        if datetime.now().hour == 0 and datetime.now().minute < 5:
            print('Sending daily report...')
            # Could implement daily report here
        
        print(f'Service health check complete. Healthy: {healthy}')
        "
        
    - name: Keep workflow active
      run: |
        echo "Monitoring completed at $(date)"
        echo "Next check in 5 minutes (GitHub Actions schedule)"